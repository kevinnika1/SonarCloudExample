name: Python container CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

   SCA:
    runs-on: ubuntu-latest
    steps: 
      - name: Checkout repo
        uses: actions/checkout@master

      - name: Run Checkov action client
        uses: bridgecrewio/checkov-action@master
        with:
          soft_fail: true
          output_format: cli
          
      - name: Run Checkov action json
        uses: bridgecrewio/checkov-action@master
        with:
          soft_fail: true
          output_format: json
      
      - name: Run Checkov action github
        uses: bridgecrewio/checkov-action@master
        with:
          soft_fail: true
          output_format: github_failed_only
      

   SAST:
    runs-on: ubuntu-latest
    steps:
    - name: checkout repo
      uses: actions/checkout@master
    
    - name: SonarCloud Scan
      uses: sonarsource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        args: >
          -Dsonar.organization=kevinnika1
          -Dsonar.projectKey=kevinnika1_SonarCloudExample
          -Dsonar.verbose=true

  #  - name: link to the project in sonar
   #   run: echo  "visit this link to see results of scan https://sonarcloud.io/dashboard?id=kevinnika1_SonarCloudExample"
      
   # - name: SonarQube Quality Gate check
   #   uses: sonarsource/sonarqube-quality-gate-action@master
   #   # Force to fail step after specific time
   #   timeout-minutes: 5
   #   env:
   #    SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
   
       
   # - name: Get Sonar Issues
   #   run: |
   #     python sonar-apis.py
   #     ls
        
  #  - name: upload sonar results to annotaions
  #    uses: yuzutech/annotations-action@v0.3.0
  #    with:
  #        repo-token: "${{ secrets.GITHUB_TOKEN }}"
  #        title: 'Sonar Issues'
  #        input: './sonarresults.json'
          
   SASTCheck:
    needs: [SAST]
    runs-on: ubuntu-latest
    steps:
      - name: test
        uses: kevinnika1/Sonarcloud-GithubChecks-action@v2
        with:
          org: 'kevinnika1'
          project-key: 'kevinnika1_SonarCloudExample'
          repo_token: ${{ secrets.GITHUB_TOKEN }}

   ContainerVM:
    runs-on: ubuntu-latest
    needs: [SCA,SAST,SASTCheck]
    steps: 
      - name:  Checkout repo
        uses: actions/checkout@master

      - name: Build an image from Dockerfile
        run: |
          docker build . --tag flask-demo-container:${{ github.sha }}
          
      - name: Run Trivy vulnerability scanner with table
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'flask-demo-container:${{ github.sha }}'
          format: 'table'
          exit-code: '0'
          ignore-unfixed: true
          vuln-type: 'os,library'
          output: trivy-resultstable.txt
          
      - id: foo
        uses: kevinnika1/Trivy-GitHubChecks-Action@v0.2
        with:
          image-ref: 'flask-demo-container:${{ github.sha }}'
          repo_token: ${{ secrets.GITHUB_TOKEN }}
   
#      - name: Run Trivy vulnerability scanner
#        uses: aquasecurity/trivy-action@master
#        with:
#          image-ref: 'flask-demo-container:${{ github.sha }}'
#          format: 'json'
#          exit-code: '0'
#          ignore-unfixed: true
#          vuln-type: 'os,library'
#          output: trivy-results.json

          
#      - name: Upload trviy results
#        uses: actions/upload-artifact@v2
#        with:
#          name: Conatiner VM results
#          path: trivy-resultstable.txt
#      
#      - name: Parse Trivy JSON output
#        run: |
#          python trivyjson.py
#          ls
          
#      - name: upload Trivy results to annotaions
#        uses: yuzutech/annotations-action@v0.3.0
#        with:
#            repo-token: "${{ secrets.GITHUB_TOKEN }}"
#            title: 'Trivy Results'
#            input: './trivyparsedresults.json'

   PushtoECR:
      runs-on: ubuntu-latest
      needs: [ContainerVM]
      name: Push to ECR

      steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push the image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.REPO_NAME }}
          IMAGE_TAG: 1.0
        run: |
          # Build a docker container and push it to ECR 
          docker build . --tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "Pushing image to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          
     
           
   CheckECR:
      runs-on: ubuntu-18.04
      needs: [PushtoECR]
      steps:
      - name: Checkout code
        uses: actions/checkout@v2
        
      - name: run trivy scan on ecr
        uses: aquasecurity/trivy-action@master
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: eu-west-1       
        with:
          image-ref:  '999603135242.dkr.ecr.eu-west-1.amazonaws.com/sonar-example:1'
          format: 'table'
          exit-code: '0'
          ignore-unfixed: true
          vuln-type: 'os,library'
           

   DeployToEKS:
      runs-on: ubuntu-latest
      needs: [PushtoECR]
      steps:
        - name: push to ecs/eks
          run: echo "pushing to eks or ecs"

   # this part need to pass it website link whether that is static or not depends on application but in this case will test a random app. 
   DAST: 
     runs-on: ubuntu-latest
     needs: [DeployToEKS]
     steps:
      - id: foo
        uses: kevinnika1/QualysWAS-Action@v1
        with:
          qualysuser: ${{ secrets.qualysuser }}
          qualyspass: ${{ secrets.qualyspass }}
          website: 'https://t5s-tst.nlv.yourmenu.cloud'
          project: 'sonarcloud-pipeline'
     # - name: Checkout
     #   uses: actions/checkout@v2
     #   
     # - name: download everything i need
     #   run: |
     #    pip install urllib3
     #    pip install requests
     #    pip install xmltodict
     #  
     # - name: run DAST scan
     #   run: python qualysdast-api.py --qualysuser ${{ secrets.qualysuser }} --qualyspass ${{ secrets.qualyspass }} --website "https://t5s-tst.nlv.yourmenu.cloud" --project "sonarcloud example pipeline"#

#      - name: save the report outputted by DAST scan
 #       uses: actions/upload-artifact@v2
  #      with:
   #       name: DAST results
    #      path: ./reports/
          

